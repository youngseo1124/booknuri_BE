
package org.example.booknuri.global.config;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.booknuri.domain.user.repository.UsersRepository;
import org.example.booknuri.global.security.filter.JwtAuthenticationFilter;
import org.example.booknuri.global.security.filter.JwtRequestFilter;
import org.example.booknuri.global.security.provider.JwtProvider;
import org.example.booknuri.global.security.service.UserDetailServiceImpl;
import org.example.booknuri.global.security.service.CustomOAuth2UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Slf4j
@Configuration
@RequiredArgsConstructor
@EnableMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfig {


    private final CustomOAuth2UserService customOAuth2UserService;
    private final  UserDetailServiceImpl userDetailService;
    private final JwtProvider jwtProvider;
    private final UsersRepository userRepository;
    private final RedisTemplate<String, String> redisTemplate;



    // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïîÌò∏Ìôî Îπà Îì±Î°ù
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }



    //  AuthenticationManager Îì±Î°ù
    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
        AuthenticationManagerBuilder authManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
        authManagerBuilder.userDetailsService(userDetailService).passwordEncoder(passwordEncoder());
        return authManagerBuilder.build();
    }

    //  CORS ÏÑ§Ï†ï (React ÌîÑÎ°†Ìä∏ÏóîÎìú ÌóàÏö©)
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.addAllowedOriginPattern("*");
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
        configuration.setExposedHeaders(Arrays.asList("Authorization"));
        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .formLogin(login -> login.disable()) // üî• Í∏∞Î≥∏ Î°úÍ∑∏Ïù∏ UI ÎπÑÌôúÏÑ±Ìôî
                .httpBasic(basic -> basic.disable()) // üî• HTTP Basic Ïù∏Ï¶ù ÎπÑÌôúÏÑ±Ìôî
                .csrf(csrf -> csrf.disable()) // üî• CSRF ÎπÑÌôúÏÑ±Ìôî
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // üî• ÏÑ∏ÏÖò ÏÇ¨Ïö© X
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/login","/userlogin", "/oauth2/**", "/auth/**","/users/join").permitAll() // üî• `/login`, `/oauth2/**` Ïù∏Ï¶ù ÏóÜÏù¥ ÌóàÏö©
                        .anyRequest().authenticated()
                );


        //  AuthenticationManager Í∞ÄÏ†∏Ïò§Í∏∞
        AuthenticationManager authenticationManager = authenticationManager(http);

        //  JWT ÌïÑÌÑ∞ Ï∂îÍ∞Ä
        http.addFilterAt(new JwtAuthenticationFilter(authenticationManager, jwtProvider, userRepository, redisTemplate),
                        UsernamePasswordAuthenticationFilter.class)
                .addFilterBefore(new JwtRequestFilter(authenticationManager, jwtProvider),
                        UsernamePasswordAuthenticationFilter.class);

        //  CORS ÏÑ§Ï†ï Ï†ÅÏö©
        http.cors(cors -> cors.configurationSource(corsConfigurationSource()));

        //  OAuth2 Î°úÍ∑∏Ïù∏ ÏÑ§Ï†ï (Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏)
        http.oauth2Login(oauth2 -> oauth2
                .userInfoEndpoint(userInfo -> userInfo
                        .userService(customOAuth2UserService)) // üîπ Ïπ¥Ïπ¥Ïò§ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï≤òÎ¶¨
                .successHandler((request, response, authentication) -> {
                    log.info("‚úÖ OAuth2 Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ! ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏôÑÎ£åÎê®.");
                })
                .failureHandler((request, response, exception) -> {
                    log.error("üö® OAuth2 Î°úÍ∑∏Ïù∏ Ïã§Ìå®! ÏòàÏô∏ Î∞úÏÉù", exception);
                    response.sendRedirect("/login?error");
                })
        );


        return http.build();
    }
}
